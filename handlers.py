from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from keyboards import *
from config import *
from data import get_products_by_category, get_product_text, get_product_by_id
from database import db
from admin import is_admin

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    db.update_user_activity(user.id)
    
    welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {SHOP_NAME}!

{SHOP_DESCRIPTION}

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:
"""
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_menu_keyboard()
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data == "main_menu":
        await show_main_menu(query)
    elif callback_data == "catalog":
        await show_catalog(query)
    elif callback_data.startswith("category_"):
        category = callback_data.split("_")[1]
        await show_category(query, category)
    elif callback_data == "orders":
        await show_orders(query)
    elif callback_data == "cart":
        await show_cart(query)
    elif callback_data == "consultation":
        await request_consultation(query)
    elif callback_data == "info":
        await show_info_menu(query)
    elif callback_data == "about":
        await show_about(query)
    elif callback_data == "delivery":
        await show_delivery(query)
    elif callback_data == "contacts":
        await show_contacts(query)
    elif callback_data.startswith("product_"):
        product_id = callback_data.split("_", 1)[1]
        await show_product(query, product_id)
    elif callback_data.startswith("add_to_cart_"):
        product_id = callback_data.split("_")[-1]
        await add_to_cart(query, product_id)
    elif callback_data == "checkout":
        await start_checkout(query)
    elif callback_data == "clear_cart":
        await clear_cart(query)
    elif callback_data == "write_admin":
        await write_admin_request(query)
    elif callback_data == "admin_back":
        await handle_admin_back(query)
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
    elif callback_data == "back_to_category":
        await show_catalog(query)
    elif callback_data == "catalog":
        await show_catalog(query)

async def show_main_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await query.edit_message_text(
        f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é {SHOP_NAME}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu_keyboard()
    )

async def show_catalog(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥"""
    await query.edit_message_text(
        "üíç –ö–∞—Ç–∞–ª–æ–≥ —É–∫—Ä–∞—à–µ–Ω–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_catalog_keyboard()
    )

async def show_category(query, category):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤"""
    category_name = JEWELRY_CATEGORIES.get(category, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    products = get_products_by_category(category)
    
    if not products:
        await query.edit_message_text(
            f"{category_name}\n\n–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=get_category_keyboard(category)
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    keyboard = []
    for product in products:
        keyboard.append([InlineKeyboardButton(
            f"{product['name']} - {product['price']:,} ‚ÇΩ".replace(",", " "),
            callback_data=f"product_{product['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")])
    
    await query.edit_message_text(
        f"{category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_orders(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await query.edit_message_text(
        "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]])
    )

async def show_cart(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    user_id = query.from_user.id
    cart_items = db.get_cart(user_id)
    
    if not cart_items:
        await query.edit_message_text(
            "üõí –ö–æ—Ä–∑–∏–Ω–∞\n\n–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
            reply_markup=get_cart_keyboard()
        )
        return
    
    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total_price = 0
    
    for item in cart_items:
        product = get_product_by_id(item['product_id'])
        if product:
            item_price = product['price'] * item['quantity']
            total_price += item_price
            text += f"‚Ä¢ {product['name']}\n"
            text += f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']}\n"
            text += f"  –¶–µ–Ω–∞: {format_price(item_price)}\n\n"
    
    text += f"üí∞ –ò—Ç–æ–≥–æ: {format_price(total_price)}"
    
    await query.edit_message_text(
        text,
        reply_markup=get_cart_keyboard()
    )

async def request_consultation(query):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    await query.edit_message_text(
        "üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="send_contact")
        ], [
            InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]])
    )

async def show_info_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    await query.edit_message_text(
        "‚öôÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_info_keyboard()
    )

async def show_about(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ"""
    about_text = f"""
üè¢ –û –Ω–∞—Å

{SHOP_NAME}
{SHOP_DESCRIPTION}

–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏–∑ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤ –∏ –∫–∞–º–Ω–µ–π.
"""
    await query.edit_message_text(
        about_text,
        reply_markup=get_info_keyboard()
    )

async def show_delivery(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ"""
    delivery_text = """
üöö –î–æ—Å—Ç–∞–≤–∫–∞

‚Ä¢ –ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–æ—Å–∫–≤–µ - 500‚ÇΩ
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏ - –æ—Ç 1000‚ÇΩ
‚Ä¢ –°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –¥–æ 15:00
"""
    await query.edit_message_text(
        delivery_text,
        reply_markup=get_info_keyboard()
    )

async def show_contacts(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
    contacts_text = f"""
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã

–¢–µ–ª–µ—Ñ–æ–Ω: {SHOP_PHONE}
Email: {SHOP_EMAIL}
–ê–¥—Ä–µ—Å: {SHOP_ADDRESS}

–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–Ω-–í—Å 10:00-22:00
"""
    await query.edit_message_text(
        contacts_text,
        reply_markup=get_info_keyboard()
    )

async def show_product(query, product_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä"""
    product = get_product_by_id(product_id)
    if not product:
        await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    product_text = get_product_text(product)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    keyboard = [
        [
            InlineKeyboardButton("üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}"),
            InlineKeyboardButton("‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_{product_id}")
        ],
        [InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data="call_request")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_category")]
    ]
    
    await query.edit_message_text(
        product_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def write_admin_request(query):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω—É"""
    await query.edit_message_text(
        "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]])
    )

async def add_to_cart(query, product_id):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    user_id = query.from_user.id
    db.add_to_cart(user_id, product_id)
    await query.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

async def start_checkout(query):
    """–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    await query.edit_message_text(
        "üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]])
    )

async def clear_cart(query):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    user_id = query.from_user.id
    db.clear_cart(user_id)
    await query.edit_message_text(
        "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞",
        reply_markup=get_cart_keyboard()
    )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    message_text = update.message.text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_activity(user.id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if is_admin(user.id):
        if message_text.startswith('/reply'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            parts = message_text.split(' ', 2)
            if len(parts) >= 3:
                try:
                    target_user_id = int(parts[1])
                    reply_text = parts[2]
                    await send_message_to_user(context.bot, target_user_id, reply_text)
                    await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
                except ValueError:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply USER_ID —Ç–µ–∫—Å—Ç")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.add_message(user.id, message_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await notify_admin_new_message(context.bot, user, message_text)
    
    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        "üì® –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_main_menu_keyboard()
    )

async def send_message_to_user(bot, user_id: int, message_text: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message_text}"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def notify_admin_new_message(bot, user, message_text: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    if not ADMIN_ID:
        return
    
    try:
        name = f"{user.first_name or ''} {user.last_name or ''}".strip()
        if not name:
            name = user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"
        
        notification = f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
        notification += f"–û—Ç: {name}\n"
        notification += f"ID: {user.id}\n"
        notification += f"–¢–µ–∫—Å—Ç: {message_text[:100]}..."
        if len(message_text) > 100:
            notification += " (–æ–±—Ä–µ–∑–∞–Ω–æ)"
        
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=notification
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")

def format_price(price):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É"""
    return f"{price:,} ‚ÇΩ".replace(",", " ") 