from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import db
from config import ADMIN_ID
from data import get_product_by_id, format_price
import json

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return str(user_id) == str(ADMIN_ID)

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    await show_admin_menu(update.message)

async def show_admin_menu(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üì® –°–æ–æ–±—â–µ–Ω–∏—è", callback_data="admin_messages")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await message.reply_text(
        "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω callback'–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    callback_data = query.data
    
    if callback_data == "admin_users":
        await show_users_list(query)
    elif callback_data == "admin_messages":
        await show_messages_list(query)
    elif callback_data == "admin_stats":
        await show_statistics(query)
    elif callback_data.startswith("admin_user_"):
        user_id_to_view = callback_data.split("_")[2]
        await show_user_details(query, int(user_id_to_view))
    elif callback_data.startswith("admin_message_"):
        message_id = callback_data.split("_")[2]
        await show_message_details(query, int(message_id))
    elif callback_data.startswith("reply_to_"):
        user_id_to_reply = callback_data.split("_")[2]
        await start_reply_to_user(query, int(user_id_to_reply))

async def show_users_list(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = db.get_all_users()
    
    if not users:
        await query.edit_message_text(
            "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=get_admin_back_keyboard()
        )
        return
    
    text = f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)})\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for i, user in enumerate(users[:10], 1):
        name = f"{user['first_name'] or ''} {user['last_name'] or ''}".strip()
        if not name:
            name = user['username'] or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}"
        
        text += f"{i}. {name}\n"
        text += f"   ID: {user['user_id']}\n"
        if user['phone']:
            text += f"   üìû {user['phone']}\n"
        text += f"   üìÖ {user['registration_date'][:10]}\n\n"
    
    if len(users) > 10:
        text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    keyboard = []
    for user in users[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        name = f"{user['first_name'] or ''} {user['last_name'] or ''}".strip()
        if not name:
            name = user['username'] or f"ID: {user['user_id']}"
        
        keyboard.append([InlineKeyboardButton(
            f"üë§ {name[:20]}", 
            callback_data=f"admin_user_{user['user_id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_user_details(query, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.get_user(user_id)
    if not user:
        await query.edit_message_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_admin_back_keyboard()
        )
        return
    
    name = f"{user['first_name'] or ''} {user['last_name'] or ''}".strip()
    if not name:
        name = user['username'] or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}"
    
    text = f"üë§ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
    text += f"–ò–º—è: {name}\n"
    text += f"ID: {user['user_id']}\n"
    text += f"Username: @{user['username']}\n" if user['username'] else "Username: –Ω–µ —É–∫–∞–∑–∞–Ω\n"
    text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n" if user['phone'] else "–¢–µ–ª–µ—Ñ–æ–Ω: –Ω–µ —É–∫–∞–∑–∞–Ω\n"
    text += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['registration_date']}\n"
    text += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user['last_activity']}\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cart = db.get_cart(user_id)
    text += f"–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {len(cart)}\n"
    
    keyboard = [
        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_to_{user_id}")],
        [InlineKeyboardButton("üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"admin_cart_{user_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_users")]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_messages_list(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    messages = db.get_unread_messages()
    
    if not messages:
        await query.edit_message_text(
            "üì® –°–æ–æ–±—â–µ–Ω–∏—è\n\n–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.",
            reply_markup=get_admin_back_keyboard()
        )
        return
    
    text = f"üì® –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ({len(messages)})\n\n"
    
    keyboard = []
    for i, message in enumerate(messages[:5], 1):
        name = f"{message['first_name'] or ''} {message['last_name'] or ''}".strip()
        if not name:
            name = message['username'] or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message['user_id']}"
        
        text += f"{i}. –û—Ç: {name}\n"
        text += f"   {message['message_text'][:50]}...\n"
        text += f"   {message['timestamp'][:16]}\n\n"
        
        keyboard.append([InlineKeyboardButton(
            f"üì® {name[:20]}", 
            callback_data=f"admin_message_{message['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_message_details(query, message_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã
    messages = db.get_unread_messages()
    message = None
    for msg in messages:
        if msg['id'] == message_id:
            message = msg
            break
    
    if not message:
        await query.edit_message_text(
            "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_admin_back_keyboard()
        )
        return
    
    name = f"{message['first_name'] or ''} {message['last_name'] or ''}".strip()
    if not name:
        name = message['username'] or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message['user_id']}"
    
    text = f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ\n\n"
    text += f"–û—Ç: {name}\n"
    text += f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message['user_id']}\n"
    text += f"–í—Ä–µ–º—è: {message['timestamp']}\n\n"
    text += f"–¢–µ–∫—Å—Ç:\n{message['message_text']}"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ", callback_data=f"mark_read_{message_id}")],
        [InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_{message['user_id']}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º", callback_data="admin_messages")]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_statistics(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    users = db.get_all_users()
    messages = db.get_unread_messages()
    
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
    text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
    text += f"üì® –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    from datetime import datetime, timedelta
    today = datetime.now().date()
    week_ago = today - timedelta(days=7)
    
    new_users_week = 0
    for user in users:
        reg_date = datetime.strptime(user['registration_date'][:10], '%Y-%m-%d').date()
        if reg_date >= week_ago:
            new_users_week += 1
    
    text += f"üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {new_users_week}\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def start_reply_to_user(query, user_id):
    """–ù–∞—á–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user = db.get_user(user_id)
    if not user:
        await query.edit_message_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_admin_back_keyboard()
        )
        return
    
    name = f"{user['first_name'] or ''} {user['last_name'] or ''}".strip()
    if not name:
        name = user['username'] or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    query.from_user.id = user_id  # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    
    await query.edit_message_text(
        f"üí¨ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {name}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
        ]])
    )

def get_admin_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")
    ]])

async def handle_admin_back(query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await show_admin_menu(query.message) 